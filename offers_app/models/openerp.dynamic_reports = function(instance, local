openerp.dynamic_reports = function(instance, local) {
    var _t = instance.web._t,
    _lt = instance.web._lt;
    var fliter_click = false
    var journal_ids =[]
    var defaultcurrency
    var DynamicReports = new instance.web.Model('dynamic.reports.data.listing');
    var QWeb = instance.web.qweb;
    var enable_filter = false; // this is used for previous period comparison
    var enable_filter = new Boolean(false)
    var debit_credit = false;  // used for disply debit and credit columns.
    var data = {};
    var main_group_list = []
   var main_sub_group_list = []
   var sub_group_list = []
   var report_name = []
   var llist = []
    local.dynamic_report_instance= instance.Widget.extend({
        template: "dynamic_report_header_template",
        events:{
            'click #dynamic_report_export_pdf':'dynamic_reports_pdfReport',  // for pdf report
            'click #dynamic_report_export_xlsx':'dynamic_reports_xlxsReport',   // xlsx report
            'click .dynamic_reports_selection-js':'show_filters',                 //for showing filters
        },
        init: function(parent,context) {
            this.context = context;
            var self = this;
            this.title = context;
            this.report_name = context.context.report_dict[0];
            this._super(parent,context);
            },
        start: function() {
            var self = this;
            this.context = this.report_name
            var dt = new Date();
            var service_table = new local.DynamicReportpdf(this);
            return service_table.appendTo(this.$el.find('#dynamic_reports_move_lines'));
            $('.dynamic_reports_headclass').show();
            },
        dynamic_reports_pdfReport: function(event) {
            var that=this;
            data['form']['sub_group_list']= sub_group_list
            data['form']['main_sub_group_list']= main_sub_group_list
            data['form']['main_group_list']= main_group_list
//            data['llist'] = llist
            llist['data']['sub_group_list']= sub_group_list
            llist['data']['main_sub_group_list']= main_sub_group_list
            llist['data']['main_group_list']= main_group_list
            if (that.report_name == 'Profit and Loss'){
                var Profit_Loss_PDF = new instance.web.Model('report.profit.loss');
                Profit_Loss_PDF.call('print_report_profit_loss_dynamic',[llist]).then(function(list) {
                    that.do_action(list);
                });
            }
            if (that.report_name == 'Balance Sheet'){
                var BalanceSheet_PDF = new instance.web.Model('report.balance.sheet');
                data['report_lines_pdf']=llist['report_lines_pdf']
                BalanceSheet_PDF.call('print_report_balancesheet_dynamic', [data]).then(function(list) {
                    that.do_action(list);
                });
            }
        },
        dynamic_reports_xlxsReport: function(event) {
            var that=this;
            if (that.report_name == 'Profit and Loss'){
                var Profit_Loss_XLXS = new instance.web.Model('dynamic.reports.profit.and.loss');
                Profit_Loss_XLXS.call('xlxs_profitloss_report',[llist]).then(function(list) {
                    that.do_action(list);
                });
            }
            if (that.report_name == 'Balance Sheet'){
                var BalanceSheet_XLXS = new instance.web.Model('report.dynamic_reports.balancesheet_xlsx');
                data['report_lines_xlsx']=llist['report_lines_xlsx']
                data['equity']=llist['equity']
                BalanceSheet_XLXS.call('xlxs_balancesheet_report', [[], data]).then(function(list) {
                    that.do_action(list);
                });
            }

        },
        show_filters: function(e){
                e.stopImmediatePropagation();
                e.stopPropagation();
                fliter_click = true
                $('.dynamic_reports_headclass').slideToggle();
        },
   });

    local.DynamicReportpdf = instance.Widget.extend({
        template: "dynamic_reports_main_template",
        events:{
             'click #tags':'currency_filter',
             'click #filter_button':'apply_filter',
//            'click .general_ledger_value':'general_ledger',
            'click .table-accordion-head':'display_accounts',
            'change #province':'onchange_province',
            'change #location' :'onchange_location',
            'change #country':'onchange_country',
            'change #report_time_period': 'getDateRange',
            'change #check2': 'onchange_debit_credit',
            'change #end_date1':'onchange_end_date',
            'change #start_date1':'onchange_start_date1',
            'click .main_action_click':'click_action_main_action',
            'click .click_main_group':'click_action_main_group',
            'click .click_group':'click_action_group',
            'click .click_subgroup':'click_action_subgroup',
            'click .accordion-wrapper':'click_accordion_wrapper',
        },
        init: function(parent,context) {

            this.context = context;
            var self = this;
            this.title = context;
            this._super(parent,context);
            this.name = parent.context;
            },
        start: function() {
            var self = this;
            var dt = new Date();
            var required_field_set = false
            var main_group_list = []
            var main_sub_group_list = []
            var sub_group_list = []
            var report_head = this.name

            $(document).on('click', '.o_account_reports_comparison', function(e){
                    self.getDateRangeComparison(e);
            });
            $(document).on('click', '.accordion-header-bs', function(){
                $(this).siblings('.accordion-body').slideToggle();
            });
            $( document).off( "click", ".table-accordion-head" );
            $( document).off( "click", ".dynamic_reports_selection-js" );
            $(document).on('click', '#open-toggle', function(){
                $("[class^=table-accordion-body]").slideDown();
            });
            $(document).on('click', '#close-toggle', function(){
                $("[class^=table-accordion-body]").slideUp()
            });

            $(document).ready(function(){
                DynamicReports.call('get_company_name',[]).then(function(args) {
                    comapny_name = args['company_name'];
                    $('.report_head').html(report_head);
                    $('.company').html(comapny_name);
                });
                $( document ).on('click','.datepicker1',function() {
                       $('.datepicker1').datepicker({ dateFormat: 'dd/mm/yy'}).datepicker( "show" )
                });
                $( document ).on('click','.datepicker2',function() {
                       $('.datepicker2').datepicker({ dateFormat: 'dd/mm/yy'}).datepicker( "show" )
                });
                $( document ).on('click','.datepicker3',function(e) {
                       $('.datepicker3').datepicker({ dateFormat: 'dd/mm/yy'}).datepicker( "show" );
                       e.stopImmediatePropagation();
                });
                $( document ).on('click','.datepicker4',function(e) {
                       $('.datepicker4').datepicker({ dateFormat: 'dd/mm/yy'}).datepicker( "show" );
                                   e.stopImmediatePropagation();
                });
            });
            var new_context = {
                date_range :'today',
                end_date:moment(dt).format('MM/DD/YYYY'),
            }

            $(document).on('click', '.custom_element_click', function(e){
                //  function for default comparison date range
                // both enable_filter and debit_credit couldn't enable at the same time.
                // if custom date range for comparison is true then debit credit is false.
                enable_filter = true;
                debit_credit = false;

                e.stopImmediatePropagation();
                if ($('#fa_class_change').hasClass('fa-caret-right')){
                    $('#fa_class_change').addClass('fa-caret-down');
                    $('#fa_class_change').removeClass('fa-caret-right');
                }
                else{
                    $('#fa_class_change').addClass('fa-caret-right');
                    $('#fa_class_change').removeClass('fa-caret-down');
                }
                $('.show_hide').toggle()
            });

            if(this.name == 'Profit and Loss'){
                DynamicReports.call('get_cash_tag',[]).then(function(data_received) {
                // function for tag types
                    var account=data_received;
                    self.$(".tags").html(QWeb.render('Tags',{Tags:account}));
                    self.$el.find(".js_cashtags").select2();
                });
            }
            if(this.name == 'Balance Sheet'){
                DynamicReports.call('get_tags_name', []).then(function(data_received) { // calling function from python to get the tags
                    var account=data_received;
                    self.$(".tags").html(QWeb.render('Tags',{Tags:account}));
                    self.$el.find(".js_cashtags").select2();
                });
            }

            DynamicReports.call('filter_fields',[]).then(function(results){
                // this for the default income and expence of current month. the filter values are depends on the logged user.
                self.$(".business_unit").html(QWeb.render('dynamic_reports_business_unit',
                                                                {Business_unit: results['business_unit'],
                                                                defaultbusinessunit:results['defaultbusinesunit']}));
                self.$el.find(".js-example-basic-multiple_b_unit").select2();
                self.$(".location").append(QWeb.render('dynamic_reports_Location',
                                                                {Location: results['location'],
                                                                defaultlocation:false,
                                                                dropdown_location:false}));
                self.$el.find(".js_location_dynamic_reports").select2();
                self.$(".country").append(QWeb.render('dynamic_reports_Country',
                                                                {Country: results['country'],
                                                                defaultcountry:false,
                                                                drop_down_country_list:false}));
                self.$el.find(".js_Country_dynamic_reports").select2();
                self.$(".currency").append(QWeb.render('dynamic_reports_Currency',
                                                                {Currency: results['currency'],
                                                                defaultcurrency : results['defaultcurrency']}));
                self.$el.find(".js_currency_dynamic_reports").select2();
                self.$(".province").append(QWeb.render('dynamic_reports_Province',
                                                                {Province: results['province'],
                                                                defaultprovince:false,
                                                                dropdown_province:results['dropdown_province']}));
                self.$el.find(".js_province_dynamic_reports").select2();
                journal_ids = results['jornal_ids']
                defaultcurrency = results['defaultcurrency']
                defaultprovince = results['defaultprovince']
                defaultbusinessunit = results['defaultbusinesunit']
                defaultcountry = results['defaultcountry']
                date_range = {};
                date_range['Province'] = defaultprovince

                function getTuple(a,b){
                       return [a, b];
                    }

                var a =   $('.datepicker1').value;
                var b =$('.datepicker2').value;
                var location_id=[];
                var location_name = []
                var currency = [];
                var currency_id  = defaultcurrency['id'];
                var currency_symbol = defaultcurrency['symbol'];
                var currency_name = defaultcurrency['name'];
                location_id.push(results['defaultlocation']['id']);
                location_name.push(results['defaultlocation']['name']);
                journal_ids = results['journal_ids'];
                var currency_id3 = parseInt(currency_id);
                var p_id = defaultprovince['id']
                var p_name = defaultprovince['name']
                var b_name = defaultbusinessunit['name']
                var b_id = defaultbusinessunit['id']
                var c_id = defaultcountry['id']
                var c_name = defaultcountry['name']
                filter_value = {}
                var currency = getTuple(currency_id3,currency_name)
                var today = new Date();
                var dd = today.getDate();
                var mm = today.getMonth()+1; //January is 0!
                var yyyy = today.getFullYear();
                var FirstDay = mm+'/'+1+'/'+yyyy;
                var LastDay = mm+'/'+dd+'/'+yyyy;
                var date_from = FirstDay
                var date_to = LastDay
                $('.datepicker1').val('');
                $('.datepicker2').val('');
                filter_value['province'] = false;
                filter_value['country'] = false;
                filter_value['currency'] = currency_name + ' ' + currency_symbol;
                filter_value['business_unit'] = false;
                filter_value['location'] = location_name;
                filter_value['date_from'] = 1+'/'+mm+'/'+yyyy;
                filter_value['date_to'] = dd+'/'+mm+'/'+yyyy;
                enable_filter = false;
                var tag_name=false;
                data={'model':'ir.ui.menu', 'ids': [],'form': {'business_unit_names': [], 'country_ids': false,
                    'account_report_id': [1, 'Balance Sheet'], 'date_to_cmp': '', 'province_ids':[], 'currency_id':currency,'tag_name':tag_name,
                    'id': '', 'debit_credit': debit_credit, 'used_context': {'lang': 'en_US', 'date_from': date_from,
                    'journal_ids':journal_ids, 'province_ids': [],
                    'currency_id': currency, 'state': 'posted', 'strict_range': false, 'date_to': date_to, 'business_unit_ids': [],
                    'location_ids': location_id, 'country_ids': []}, 'label_filter': '', 'business_unit_ids': [],
                    'location_names': location_name, 'enable_filter': enable_filter, 'journal_ids':journal_ids,
                    'date_to': date_to, 'currency_symbol':currency_symbol, 'country_names': false,
                    'comparison_context': {'state': 'posted', 'journal_ids':journal_ids},
                    'province_names': [], 'date_from_cmp': '', 'location_ids': location_id, 'date_from': date_from, 'target_move': 'posted','enable_group':true}}

            });
            return this._super();
        },

        apply_filter: function(e){
            var self = this;
            e.stopImmediatePropagation();
            e.stopPropagation();

            main_group_list = []
            main_sub_group_list = []
            sub_group_list = []
            // location and start and end date is mandatory for p&l report. And the following line check the same.
            if ($('.js_location_dynamic_reports').select2("val").length != 0 && document.getElementById("start_date1").value != false && document.getElementById("end_date1").value != false){
                if (fliter_click){

                    required_field_set = false

                   if (required_field_set){
                       $('.js_location_dynamic_reports').addClass('normal_condition')
                       $('.js_location_dynamic_reports').removeClass('required_field')
                   }

                    fliter_click = false
                }
                    self.currency_filter();
           }
           else{
               if ($('.js_location_dynamic_reports').select2("val").length == 0){
                   required_field_set = true
                   // Location is mandatory for P&L Dynamic Report
                   $('.js_location_dynamic_reports').removeClass('normal_condition')
                   $('.js_location_dynamic_reports').addClass('required_field')
                   alert("Location is not set.");
               }
               else{
                   alert("Custom Start or End Date not set");
               }
           }
       },

        getDateRange: function(event){
            // for the time period. autometically set the from date and to date in the datepicker.
            var self = this
            var get_range_value = $('#report_time_period').select2("val")[0].value;
            switch(get_range_value){
                case 'today':
                    var today = new Date();
                    $('.datepicker1').val(moment(today).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(today).format('DD/MM/YYYY'));
                    self.var_context = {date_range:get_range_value}
                    $('.date_range1').text('Date: Today')
                    break;
                case 'this_week':
                    var today = new Date();
                    var  d = new Date();
                    var day = d.getDay(),
                    dd = d.getDate() - day + (day == 0 ? -6:1);
                    var mm = today.getMonth()+1; //January is 0!
                    var yyyy = today.getFullYear();
                    var LastDay = mm+'/'+dd+'/'+yyyy;
                    $('.datepicker1').val(moment(LastDay).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(d).format('DD/MM/YYYY'));
                    self.var_context = {date_range:get_range_value}
                    $('.date_range1').text('Date: This Week')
                    break;
                case 'this_fortnight':
                    var today = new Date();
                    var dd = today.getDate();
                    var mm = today.getMonth()+1; //January is 0!
                    var yyyy = today.getFullYear();
                    if (dd <= 15){
                        var FirstDay = mm+'/'+1+'/'+yyyy;
                        }
                    else{
                        var FirstDay = mm+'/'+16+'/'+yyyy;
                    }
                    $('.datepicker1').val(moment(FirstDay).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(today).format('DD/MM/YYYY'));
                    self.var_context = {date_range:get_range_value}
                    $('.date_range1').text('Date: This Fortnight')
                    break;
                case 'this_month':
                    var today = new Date();
                    var dd = today.getDate();
                    var mm = today.getMonth()+1; //January is 0!
                    var yyyy = today.getFullYear();
                    var FirstDay = mm+'/'+1+'/'+yyyy;
                    var LastDay = mm+'/'+dd+'/'+yyyy;
                    var date_from = FirstDay
                    var date_to = LastDay
                    self.var_context = {date_range:get_range_value}
                    $('.datepicker1').val(moment(date_from).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(date_to).format('DD/MM/YYYY'));
                    $('.date_range1').text('Date: This Month')
                    break;
                case 'this_quarter':
                    var startdate = moment().startOf('quarter').format('MM/DD/YYYY');
                    var enddate =  moment().format('MM/DD/YYYY');
                    $('.datepicker1').val(moment(startdate).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(enddate).format('DD/MM/YYYY'));
                    $('.date_range1').text('Date: This Quarter')
                    break;
                case 'this_financial_year':
                    var today = new Date();
                    var yyyy = today.getFullYear();
                    var startdate = 1+'/'+1+'/'+yyyy;
                    var enddate =  moment().format('MM/DD/YYYY');
                    $('.datepicker1').val(moment(startdate).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(enddate).format('DD/MM/YYYY'));
                    $('.date_range1').text('Date: This Financial Year')
                    break;
                case 'last_week':
                    var today = new Date();
                    var d = new Date();
                    var to = d.setTime(d.getTime() - (d.getDay() ? d.getDay() : 7) * 24 * 60 * 60 * 1000);
                    var from = d.setTime(d.getTime() - 6 * 24 * 60 * 60 * 1000);
                    $('.datepicker1').val(moment(from).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(to).format('DD/MM/YYYY'));
                    self.var_context = {date_range:get_range_value}
                    $('.date_range1').text('Date: Last Week')
                    break;
                case 'last_fortnight':
                    var date = new Date();
                    var dd = date.getDate();
                    var mm = date.getMonth()+1; //January is 0!
                    var yyyy = date.getFullYear();
                    if (dd <= 15){
                     var firstDay = new Date(date.getFullYear(), date.getMonth()-1, 15);
                    var lastDay = new Date(date.getFullYear(), date.getMonth(), 0);
                        }
                    else{
                         var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
                    var lastDay = new Date(date.getFullYear(), date.getMonth(), 15);
                }
                    $('.datepicker1').val(moment(firstDay).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(lastDay).format('DD/MM/YYYY'));
                    self.var_context = {date_range:get_range_value}
                    $('.date_range1').text('Date: Last Fortnight')
                    break;
                case 'last_month':
                    var date = new Date();
                    var firstDay = new Date(date.getFullYear(), date.getMonth()-1, 1);
                    var lastDay = new Date(date.getFullYear(), date.getMonth(), 0);
                    self.var_context = {date_range:get_range_value}
                    $('.datepicker1').val(moment(firstDay).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(lastDay).format('DD/MM/YYYY'));
                    $('.date_range1').text('Date: Last Month')
                    break;
                case 'last_quarter':
                    var today = new Date(),
                    quarter = Math.floor((today.getMonth() / 3)),
                    startDate,
                    endDate;
                    startDate = new Date(today.getFullYear(), quarter * 3 - 3, 1);
                    endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 3, 0);
                    $('.datepicker1').val(moment(startDate).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(endDate).format('DD/MM/YYYY'));
                    $('.date_range1').text('Date: Last Quarter')
                    break;
                case 'last_financial_year':
                    var today = new Date();
                    var yyyy = today.getFullYear() - 1;
                    var startdate = 1+'/'+1+'/'+yyyy;
                    var enddate =  12+'/'+31+'/'+yyyy
                    $('.datepicker1').val(moment(startdate).format('DD/MM/YYYY'));
                    $('.datepicker2').val(moment(enddate).format('DD/MM/YYYY'));
                    $('.date_range1').text('Date:Last Financial Year')
                    break;
                case 'custom':
                    $('.datepicker1').val('');
                    $('.datepicker2').val('');
                    $('.date_range1').text('Custom')
                    break;
            }
        event.stopImmediatePropagation();
        },

        getDateRangeComparison:function(event) {
            // for comparioson with the previous time and custom date.
            var self = this
            var get_range_value = $(event.target).parents('li').data('dateval')
            //change the date format to dd/mm/yy to mm/dd/yy.
            var input = document.getElementById("end_date1").value;
            if(input){
                var date_tos = input.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})/);
                var date_to = date_tos[2]+'/'+date_tos[1]+'/'+date_tos[3]
                var date_to = new Date(date_to);
                var inp = document.getElementById("start_date1").value;
                date_tos = inp.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})/);
                var date_from = date_tos[2]+'/'+date_tos[1]+'/'+date_tos[3]
                date_from = new Date(date_from)

                switch(get_range_value){
                    case 'no_comparison':
                        var today = new Date();
                        enable_filter = false;
                         $('.datepicker3').val('');
                         $('.datepicker4').val('');
                    break;
                    case 'same_period_last_year':
                        var dd = date_to.getDate();
                        var mm = date_to.getMonth()+1; //January is 0!
                        var yyyy = date_to.getFullYear()-1;
                        var dd1 = date_from.getDate();
                        var mm1 = date_from.getMonth()+1; //January is 0!
                        var yyyy1 = date_from.getFullYear()-1;
                        var LastDay =  mm+'/'+dd+'/'+yyyy;
                        var FirstDay = mm1+'/'+dd1+'/'+yyyy1;
                        $('.datepicker3').val(moment(FirstDay).format('DD/MM/YYYY'));
                        $('.datepicker4').val(moment(LastDay).format('DD/MM/YYYY'));
                        enable_filter = true;
                        debit_credit = false;
                    break;
                }
            }
        },

        currency_filter: function(e) {
            //  Gets all the input filtering from the Report screen and
            //    send it to python function
            var self = this;
            var name_type = this.name
            var l_id = [];    // location_id - This list contain the ids of all selected location in the report filtering
            var l_name = [];  //location_name -  This list contain the names of all selected location in the report filtering
            var b_id = [];    // all selected business unit is
            var b_name=[];   // selected business unit names in the report filtering
            var c_id = [];      // selected country ids
            var c_name = [];        //selected country names
            var p_id = [];          //selected province ids
            var p_name = [];        //selected province names
            var debit_credit = document.getElementById("check2").checked;
            enable_filter;
            if (enable_filter == true){

                    // check2 - > id of  debit_credit checkbox
                    document.getElementById("check2").checked = false;
            }
            if (debit_credit == true){
                enable_filter =false;

            }
            var country_array = $('#country').val();  //for getting the selected country.
                if (country_array != null){
                    //append the id and name of selected countries
                    var c_id=[];
                    var c_name = [];
                    for(i=0;i<country_array.length;i++){
                        c_id.push(parseInt(country_array[i].split('+')[0]));
                        c_name.push(country_array[i].split('+')[1]);
                    }
                }

            var values = $('#location').val();  // for getting the selected locations.
                if (values != null){
                    // append the id and name of selected locations
                    var l_id=[];
                    var l_name = [];
                    for(i=0;i<values.length;i++){
                          l_id.push(parseInt(values[i].split('+')[0]));
                          l_name.push(values[i].split('+')[1]);
                }
            }

            var province_array = $('#province').val(); //getting the selected province.
            if (province_array != null){
                // append the id and name of selected province.
                var p_id=[];
                var p_name = [];
                for(i=0;i<province_array.length;i++){
                    p_id.push(parseInt(province_array[i].split('+')[0]));
                    p_name.push(province_array[i].split('+')[1]);
                }
            }

            var b_unit = $('#business_unit').val();  // for getting the selected business unit.
                if (b_unit != null){
                    // append the id and name of selected business unit.
                    var b_id=[];
                    var b_name = [];
                    for(i=0;i<b_unit.length;i++){
                        b_id.push(parseInt(b_unit[i].split('+')[0]));
                        b_name.push(b_unit[i].split('+')[1]);

                    }
                    }
                else{
                        var b_id = false;
                        var b_name = false;
                    }


            function getTuple(a,b){
               return [a, b];
            }


            if (enable_filter == true){
                // change the date format to mm/dd/yyyy
                var date_to_cmp = document.getElementById("end_date2").value;
                var date_tos = date_to_cmp.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})/);
                date_to_cmp = date_tos[2]+'/'+date_tos[1]+'/'+date_tos[3]
                var date_from_cmp = document.getElementById("start_date2").value;
                var date_tos = date_from_cmp.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})/);
                date_from_cmp = date_tos[2]+'/'+date_tos[1]+'/'+date_tos[3]
                 var strict_range = true; // enable_filter is true strict_range is true.used for comparison
                }
                else{
                strict_range = false;
                }


            var date_to = document.getElementById("end_date1").value;
            var date_to1 = date_to
            if (date_to == ''){
                date_to=false;
            }
            if (date_to){
                matched_string = date_to.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
                date_to = matched_string[2] +'/'+ matched_string[1] +'/' +matched_string[3];
            }

            var date_from = document.getElementById("start_date1").value;
            var date_from1 = date_from
            if (date_from == ''){
                date_from=false;
            }
            if (date_from){
                matched_string = date_from.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
                date_from = matched_string[2] +'/'+ matched_string[1] +'/' +matched_string[3];
            }

            var currency_id = document.getElementById("currency").value.split('+')[0];
            var currency_name = document.getElementById("currency").value.split('+')[1];
            var currency_symbol = document.getElementById("currency").value.split('+')[2];
            currency_id = getTuple(parseInt(currency_id), currency_name);
            var enable_group = document.getElementById("check3").checked;
            var state = document.getElementById('target_moves1').value;


                var values = $('#tags').val(); // geting the selected tags
                if (name_type == 'Profit and Loss'){
                    if (values != null){
                        tag_id=[];
                        tag = [];
                        for(i=0;i<values.length;i++){
                              tag.push(values[i]);
                                }
                        }
                    else{
                       var tag=false
                       }
                }
                if (name_type == 'Balance Sheet'){
                    if (values != null) {
                        var tag = [];
                        var tag_name = [];
                        for (i = 0; i < values.length; i++) {
                            tag.push(parseInt(values[i].split('+')[0]));
                            tag_name.push(values[i].split('+')[1]);
                        }
                    }
                    else {
                        var tag_name = false;
                        var tag = false;
                    }
                    journal_ids = []
                    strict_range = true
                }

            //comparison_context contain the filters foe comarison. this will send to the python function.
            var comparison_context = {
                'state': state,
                'journal_ids': journal_ids
            };
            if(strict_range == true){
                //  strict_range is used for comparison between two time periods.
                  comparison_context.strict_range = true;
                  comparison_context.date_from = date_from_cmp;
                  comparison_context.date_to = date_to_cmp;
            };
            // used context contain the normal filters.
            used_context = {
                'lang': 'en_US',
                'date_from': date_from,
                'journal_ids': journal_ids,
                'province_ids': p_id,
                'currency_id':currency_id,
                'state': state,
                'strict_range': strict_range,
                'date_to': date_to,
                'business_unit_ids': b_id,
                'location_ids': l_id,
                'country_ids': c_id,
                'tag':tag
                }
            form = {
                'business_unit_names': b_name,
                'country_ids': c_id,
                'date_to_cmp':date_to_cmp,
                'province_ids': p_id,
                'currency_id': currency_id,
                'id': '',
                'date_from': date_from,
                'used_context':  used_context,
                'business_unit_ids': b_id,
                'enable_filter': enable_filter,
                'location_names': l_name,
                'report_head':name_type,


                'currency_symbol':currency_symbol,
                'journal_ids': journal_ids,
                'date_to': date_to,
                'country_names': c_name,
                'comparison_context':comparison_context,
                'province_names': p_name,
                'date_from_cmp':date_from_cmp,
                'location_ids': l_id,
                'debit_credit